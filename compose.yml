# compose.yml

services:
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: dev
    volumes:
      # This is a bind mount because it directry specifies the PATH on the host side.
      - ./api:/api
    ports:
      - 3001:3000
    stdin_open: true
    tty: true
    restart: always
    # Start db first.
    depends_on:
      - db

  db:
    build:
      context: .
      dockerfile: docker/db/Dockerfile
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "app"
    ports:
      - 5433:5432
    volumes:
      - ./.data/db:/var/lib/postgresql/data
      # Mounting with volumes eliminates the need to build each time.
      - ./docker/db/init-scrips:/docker-entrypoint-initdb.d
    stdin_open: true
    tty: true
    restart: always

  dbcrient:
    image: dpage/pgadmin4:8.8
    environment:
      PGADMIN_DEFAULT_EMAIL: "example@example.com"
      PGADMIN_DEFAULT_PASSWORD: "example"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      PGADMIN_SERVER_JSON_FILE: "/pgadmin4/servers.json"
      PGADMIN_PREFERENCES_JSON_FILE: "/pgadmin4/preferences.json"
    ports:
      - 5051:80
    volumes:
      - ./.pgadmin:/var/lib/pgadmin
      - ./config/servers.json:/pgadmin4/servers.json
      - ./config/preferences.json:/pgadmin4/preferences.json
    restart: always
    depends_on:
      - db

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: dev
    volumes:
      - ./frontend:/frontend
    ports:
      - 5174:5173
    stdin_open: true
    tty: true
    restart: always
    depends_on:
      - api

  web:
    image: nginx:1.26.1-alpine
    volumes:
      - ./docker/web/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
    restart: always
    depends_on:
      - api
      - frontend

networks:
  default:
    name: d-n_default
# volumes:
# In development environment, no volumes.
# In deployment environment, using volumes.
